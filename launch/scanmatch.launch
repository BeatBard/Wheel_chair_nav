<?xml version="1.0"?>
<launch>
  <!-- ========== ARGUMENTS ========== -->
  <!-- Adjust as necessary -->
  <arg name="scan_topic" default="/scan" />
  <arg name="base_frame" default="base_link" />
  <arg name="odom_frame" default="odom" />

  <!-- ========== STATIC TRANSFORMS ========== -->
  <!-- For example, if your laser frame is "cloud_POS_000_DIST1", link it to base_link:
       (Adjust x,y,z and roll,pitch,yaw if your sensor is offset physically) -->
  <node pkg="tf" type="static_transform_publisher" name="static_cloud_pos_000_tf"
        args="0 0 0 0 0 0 base_link cloud_POS_000_DIST1 100" />

  <!-- If you have multiple laser frames, add similar static transforms. -->
  
  <!-- ========== LASER SCAN MATCHER NODE ========== -->
  <!-- Subscribes to your LaserScan, publishes odom->base_link as your 'odom' transform. -->
  <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher" output="screen">
    <!-- The LaserScan topic we read -->
    <param name="scan_topic" value="$(arg scan_topic)" />

    <!-- The frame in which we'll do matching. Typically 'odom' or 'map', but we
         want 'odom' so AMCL can handle 'map->odom'. -->
    <param name="fixed_frame" value="$(arg odom_frame)" />

    <!-- The robot body frame -->
    <param name="base_frame" value="$(arg base_frame)" />

    <!-- The frame we publish for odometry -->
    <param name="odom_frame" value="$(arg odom_frame)" />

    <!-- We rely only on scans, no IMU or wheel odometry. -->
    <param name="use_imu" value="false" />
    <param name="use_odom" value="false" />

    <!-- Actually publish TF and the /pose message -->
    <param name="publish_tf" value="true" />
    <param name="publish_pose" value="true" />

    <!-- Tolerance to handle minor timing offsets -->
    <param name="transform_tolerance" value="0.2" />

    <!-- Additional advanced parameters you can tune, e.g.:
    <param name="max_iterations" value="10" />
    <param name="max_correspondence_dist" value="1.0" />
    <param name="epsilon_xy" value="0.0001" />
    <param name="epsilon_theta" value="0.0001" />
    <param name="outlier_threshold" value="0.05" />
    -->
  </node>
</launch>
